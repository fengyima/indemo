{
  "code":200,
  "message": "success",
  "data": {
      "id": 1,
      "title": "Javascript中valueOf与toString区别",
      "summary": "基本上，所有JS数据类型都拥有这两个方法，null除外。它们俩解决javascript值运算与显示的问题，重写会加大它们调用的优化。",
      "content": "<p><strong>测试分析</strong></p>        <p>先看一例：<br>        <pre>          var aaa = {&nbsp;<br>          &nbsp;i: 10,&nbsp;<br>          &nbsp;valueOf: function() { return this.i+30; },&nbsp;<br>          &nbsp;toString: function() { return this.valueOf()+10; }&nbsp;<br>          }&nbsp;<br>          <br>          alert(aaa &gt; 20); // true&nbsp;<br>          alert(+aaa); // 40&nbsp;<br>          alert(aaa); // 50&nbsp;<br>        </pre>        之所以有这样的结果，因为它们偷偷地调用valueOf或toString方法。<br>        但如何区分什么情况下是调用了哪个方法呢，我们可以通过另一个方法测试一下。<br>        由于用到console.log，请在装有firebug的FF中实验！<br>        <pre>          var bbb = {<br>          &nbsp;i: 10,<br>          &nbsp;toString: function() {<br>          &nbsp; console.log('toString');<br>          &nbsp; return this.i;<br>          &nbsp;},<br>          &nbsp;valueOf: function() {<br>          &nbsp; console.log('valueOf');<br>          &nbsp; return this.i;<br>          &nbsp;}<br>          }<br>          <br>          alert(bbb);// 10 toString<br>          alert(+bbb); // 10 valueOf<br>          alert(''+bbb); // 10 valueOf<br>          alert(String(bbb)); // 10 toString<br>          alert(Number(bbb)); // 10 valueOf<br>          alert(bbb == '10'); // true valueOf<br>          alert(bbb === '10'); // false<br>        </pre>        结果给人的感觉是，如果转换为字符串时调用toString方法，如果是转换为数值时则调用valueOf方法，但其中有两个很不和谐。一个是alert(''+bbb)，字符串合拼应该是调用toString方法……另一个我们暂时可以理解为===操作符不进行隐式转换，因此不调用它们。为了追究真相，我们需要更严谨的实验。<br>        <pre>          var aa = {&nbsp;<br>          &nbsp;i: 10,&nbsp;<br>          &nbsp;toString: function() {&nbsp;<br>          &nbsp; console.log('toString');&nbsp;<br>          &nbsp; return this.i;&nbsp;<br>          &nbsp;}&nbsp;<br>          }&nbsp;<br>          alert(aa);// 10 toString&nbsp;<br>          alert(+aa); // 10 toString&nbsp;<br>          alert(''+aa); // 10 toString&nbsp;<br>          alert(String(aa)); // 10 toString&nbsp;<br>          alert(Number(aa)); // 10 toString&nbsp;<br>          alert(aa == '10'); // true toString&nbsp;<br>          <br>          //再看valueOf。<br>          var bb = {&nbsp;<br>          &nbsp;i: 10,&nbsp;<br>          &nbsp;valueOf: function() {&nbsp;<br>          &nbsp; console.log('valueOf');&nbsp;<br>          &nbsp; return this.i;&nbsp;<br>          &nbsp;}&nbsp;<br>          }&nbsp;<br>          <br>          alert(bb);// [object Object]&nbsp;<br>          alert(+bb); // 10 valueOf&nbsp;<br>          alert(''+bb); // 10 valueOf&nbsp;<br>          alert(String(bb)); // [object Object]&nbsp;<br>          alert(Number(bb)); // 10 valueOf&nbsp;<br>          alert(bb == '10'); // true valueOf&nbsp;<br>          <br>          发现有点不同吧？！它没有像上面toString那样统一规整。<br>          对于那个[object Object]，我估计是从Object那里继承过来的，我们再去掉它看看。<br>          <br>          Object.prototype.toString = null;&nbsp;<br>          var cc = {&nbsp;<br>          &nbsp;i: 10,&nbsp;<br>          &nbsp;valueOf: function() {&nbsp;<br>          &nbsp; console.log('valueOf');&nbsp;<br>          &nbsp; return this.i;&nbsp;<br>          &nbsp;}&nbsp;<br>          }&nbsp;</p>          <p><br>          alert(cc);// 10 valueOf&nbsp;<br>          alert(+cc); // 10 valueOf&nbsp;<br>          alert(''+cc); // 10 valueOf&nbsp;<br>          alert(String(cc)); // 10 valueOf&nbsp;<br>          alert(Number(cc)); // 10 valueOf&nbsp;<br>          alert(cc == '10'); // true valueOf&nbsp;<br>        </pre>        总结：valueOf偏向于运算，toString偏向于显示。<br>        1、<span style=white-space:pre> </span>在进行对象转换时（例如:alert(a)）,将优先调用toString方法，如若没有重写toString将调用valueOf方法，如果两方法都不没有重写，但按Object的toString输出。<br>        2、<span style=white-space:pre> </span>在进行强转字符串类型时将优先调用toString方法，强转为数字时优先调用valueOf。<br>        3、<span style=white-space:pre> </span>在有运算操作符的情况下，valueOf的优先级高于toString。</p>"
  }
}